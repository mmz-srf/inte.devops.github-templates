name: Build & Test Gradle project

on:
  workflow_call:
    inputs:
      publishJar:
        type: boolean
        default: false
      createContainer:
        type: boolean
        default: false
      javaVersion:
        type: number
        default: 17
      gradleBuildTasks:
        type: string
        default: "--info clean build test"
      gradlePublishJarTasks:
        type: string
        default: "publish"
      gradleDockerTasks:
        type: string
        default: "dockerPush"

jobs:
  gradle-build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      INTE_JFROG_ARTIFACT_TOKEN: ${{ secrets.INTE_JFROG_ARTIFACT_TOKEN }}
      AZURE_ARTIFACTS_ENV_ACCESS_TOKEN: ${{ secrets.INTE_AZURE_ARTIFACT_TOKEN }}

    steps:
    - name: Checkout Project Sources
      uses: actions/checkout@v3

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ inputs.javaVersion }}
        cache: 'gradle'
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2

    ## Build
    - name: Build & Test
      run: ./gradlew ${{ inputs.gradleBuildTasks }}

    - uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        comment_mode: failures
        files: |
          **/test-results/**/*.xml
          **/test-results/**/*.trx
          **/test-results/**/*.json

    ## Sonar
    - name: Setup Cache for SonarCloud
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Sonar
      run: ./gradlew sonar -Pcoverage --info
      env:
        SONAR_TOKEN: ${{ secrets.INTE_SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    ## Git-Status (for Debugging)
    - name: Print Git-Status
      run: git status

    ## Publishing
    - name: Publish jar
      if: startsWith(github.ref, 'refs/tags/') && inputs.publishJar
      run: ./gradlew ${{ inputs.gradlePublishJarTasks }}

    - name: Login to STXT Registry
      if: startsWith(github.ref, 'refs/tags/') && inputs.createContainer
      uses: docker/login-action@v2
      with:
        registry: registry.swisstxt.ch
        username: ${{ secrets.INTE_STXT_REGISTRY_USERNAME }}
        password: ${{ secrets.INTE_STXT_REGISTRY_TOKEN }}

    - name: Create docker container
      if: startsWith(github.ref, 'refs/tags/') && inputs.createContainer
      run: ./gradlew ${{ inputs.gradleDockerTasks }}
