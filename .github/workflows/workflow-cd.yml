name: Release
run-name: Release ${{ inputs.version }} on ${{ inputs.environment }}

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment'
        type: string
        default: test
      version:
        description: 'Release version'
        type: string
        required: true
      deploymentNamespace:
        type: string
      deploymentManifestsDirectory:
        type: string
        default: "./deployment"
      jobTimeout:
        type: number
        description: 'Timeout for job in minutes'
        default: 10
    secrets:
      INTE_CARGO_URL:
        required: true
      INTE_CARGO_SECRET:
        required: true
jobs:
  deploy-to-cluster:
    runs-on: srf-inte-cargo
    timeout-minutes: ${{ inputs.jobTimeout }}

    steps:
      - name: Checkout project sources
        uses: actions/checkout@v3

      - name: Set environment specific variables
        run: |
          if [ "test" == "${{ inputs.environment }}" ]
          then
            echo "inte-domain=inte-test.media.int" >> $GITHUB_ENV
          elif [ "prod" == "${{ inputs.environment }}" ]
          then
            echo "inte-domain=inte.media.int" >> $GITHUB_ENV
          else
            echo "Error: Unknown environment"
            exit 1
          fi

      - name: Replace token in manifest
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '#{'
          tokenSuffix: '}#'
          files: '["${{ inputs.deploymentManifestsDirectory }}/*.yaml", "${{ inputs.deploymentManifestsDirectory }}/*.yml", "./kustomize/**/*.yaml"]'
        env:
          environment: ${{ inputs.environment }}
          version: ${{ inputs.version }}

      - name: Login to cluster with service-account
        uses: azure/k8s-set-context@v3
        with:
          method: service-account
          k8s-url: ${{ secrets.INTE_CARGO_URL }}
          k8s-secret: ${{ secrets.INTE_CARGO_SECRET }}

      - name: Deploy app to cluster
        env:
          DEPLOYMENT_NAMESPACE: ${{ inputs.deploymentNamespace }}
          DEPLOYMENT_MANIFEST_DIRECTORY: ${{ inputs.deploymentManifestsDirectory }}
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          kubectl version
          if [[ $DEPLOYMENT_NAMESPACE ]]
          then
            echo "Update K8s resources in namespace $DEPLOYMENT_NAMESPACE"
            # Ignore exit code in diff, as when there is a diff exit code is always not 0
            kubectl -n $DEPLOYMENT_NAMESPACE diff -f $DEPLOYMENT_MANIFEST_DIRECTORY || true
            deployment_name=$(kubectl -n $DEPLOYMENT_NAMESPACE apply -f $DEPLOYMENT_MANIFEST_DIRECTORY -ojson | jq -r '.items[] | select(.kind == "Deployment") | .metadata.name')
            echo "Wait until deployment $deployment_name in namespace $DEPLOYMENT_NAMESPACE finishes"
            kubectl -n $DEPLOYMENT_NAMESPACE rollout status Deployment/$deployment_name 
          else
            echo "Deploy with kustomize the following resources"
            kustomize_dir=./kustomize/overlays/${ENVIRONMENT}
            # Ignore exit code in diff, as when there is a diff exit code is always not 0
            kubectl diff -k ${kustomize_dir} || true
            deployments=$(kubectl apply -k ${kustomize_dir} -ojson | jq -r '.items[] | select(.kind == "Deployment") | "\(.metadata.namespace),\(.metadata.name)"')
            for deployment in $deployments ; do
              ns=$( echo "$deployment" | cut -f1 -d ',')
              deployment_name=$( echo "$deployment" | cut -f2 -d ',')
              echo "Wait until deployment $deployment_name in namespace $ns finishes"
              kubectl -n $ns rollout status Deployment/$deployment_name
            done
          fi
        
